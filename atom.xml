<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.wzbus.xyz/</id>
    <title>wzbus</title>
    <updated>2019-09-20T14:05:12.360Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.wzbus.xyz/"/>
    <link rel="self" href="https://blog.wzbus.xyz//atom.xml"/>
    <subtitle>Wenzhou</subtitle>
    <logo>https://blog.wzbus.xyz//images/avatar.png</logo>
    <icon>https://blog.wzbus.xyz//favicon.ico</icon>
    <rights>All rights reserved 2019, wzbus</rights>
    <entry>
        <title type="html"><![CDATA[深拷贝与浅拷贝]]></title>
        <id>https://blog.wzbus.xyz//post/deepcopy</id>
        <link href="https://blog.wzbus.xyz//post/deepcopy">
        </link>
        <updated>2019-09-17T14:56:28.000Z</updated>
        <content type="html"><![CDATA[<p>1.浅拷贝： 将原对象或原数组的引用直接赋给新对象，新数组，新对象／数组只是原对象的一个引用；</p>
<p>2.深拷贝： 创建一个新的对象和数组，将原对象的各项属性的“值”/ 数组的所有元素拷贝过来，是“值”而不是“引用”。</p>
<h1 id="jsonparsejsonstringifyobj">JSON.parse(JSON.stringify(obj))</h1>
<p>无法保留undefined、function、symbol等属性。</p>
<h1 id="objectassgin-或者-arrayslice">Object.assgin() 或者 Array.slice()</h1>
<p>只能深拷贝基本数据类型，无法实现真正意义上的深拷贝。</p>
<h1 id="递归">递归</h1>
<pre><code>var obj = {
      str: 'str',
      syb: Symbol('syb'),
      fn: function () {
        console.log('fn');
      },
      un: undefined,
      nu: null
    }
    function deepCopy(obj) {
      var result = Array.isArray(obj) ? [] : {};
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          if (typeof obj[key] === 'object' &amp;&amp; obj[key] !== null) {
            result[key] = deepCopy(obj[key]);
          } else {
            result[key] = obj[key];
          }
        }
      }
      return result;
    }
    console.log(deepCopy(obj));
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue封装全局toast弹窗组件]]></title>
        <id>https://blog.wzbus.xyz//post/vue-toast</id>
        <link href="https://blog.wzbus.xyz//post/vue-toast">
        </link>
        <updated>2019-09-14T02:35:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="效果图">效果图</h1>
<p><img src="https://blog.wzbus.xyz//post-images/1568428586800.jpg" alt=""></p>
<h1 id="组件模板">组件模板</h1>
<p>Dialog.vue</p>
<pre><code>&lt;template&gt;
  &lt;div class=&quot;toast&quot; v-if=&quot;showWrap&quot; :class=&quot;showContent?'fadeIn':'fadeOut'&quot;&gt;
    &lt;span class=&quot;text&quot;&gt;{{text}}&lt;/span&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.toast {
  position: fixed;
  top: 80%;
  width: 100%;
  line-height: 24px;
  text-align: center;
}
.text {
  padding: 4px 10px;
  border-radius: 5px;
  font-size: 16px;
  text-align: center;
  color: #fff;
  background-color: rgba(0, 0, 0, 0.7);
  z-index: 99;
}
.fadeIn {
  animation: animateIn 0.5s;
}
.fadeOut {
  animation: animateOut 0.5s forwards;
}
@keyframes animateIn {
  0% {
    opacity: 0;
    transform: translateY(100%);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}
@keyframes animateOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
&lt;/style&gt;
</code></pre>
<h1 id="导出组件">导出组件</h1>
<p>Dialog.js</p>
<pre><code>import vue from 'vue'
import toastComponent from './Toast.vue'

const ToastConstructor = vue.extend(toastComponent)

function showToast (text, duration = 2000) {
  const toastDom = new ToastConstructor({
    el: document.createElement('div'),
    data () {
      return {
        text: text,
        showWrap: true,
        showContent: true
      }
    }
  })
  document.body.appendChild(toastDom.$el)
  setTimeout(() =&gt; { toastDom.showContent = false }, duration - 500)
  setTimeout(() =&gt; { toastDom.show = false }, duration)
}

function toast () {
  vue.prototype.$toast = showToast
}

export default toast
</code></pre>
<h1 id="注册组件">注册组件</h1>
<p>main.js</p>
<pre><code>import toast from './components/toast/Toast.js'

Vue.use(toast)
</code></pre>
<h1 id="调用组件">调用组件</h1>
<p>test.vue</p>
<pre><code>this.toast('请先登录')
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue封装全局dialog弹窗组件]]></title>
        <id>https://blog.wzbus.xyz//post/vue-dialog</id>
        <link href="https://blog.wzbus.xyz//post/vue-dialog">
        </link>
        <updated>2019-09-13T14:16:22.000Z</updated>
        <content type="html"><![CDATA[<h1 id="效果图">效果图</h1>
<p><img src="https://blog.wzbus.xyz//post-images/1568387987569.jpg" alt=""></p>
<h1 id="组件模板">组件模板</h1>
<p>Dialog.vue</p>
<pre><code>&lt;template&gt;
  &lt;div class=&quot;mask&quot; v-if=&quot;showMask&quot;&gt;
    &lt;div class=&quot;dialog&quot; :class=&quot;showDialog?'fadeIn':'fadeOut'&quot;&gt;
      &lt;div class=&quot;wrap&quot;&gt;
      &lt;div class=&quot;title_wrap&quot;&gt;
        &lt;span class=&quot;title&quot;&gt;{{text.title}}&lt;/span&gt;
        &lt;span class=&quot;iconfont close&quot; @click=&quot;close&quot;&gt;&amp;#xe6e9;&lt;/span&gt;
      &lt;/div&gt;
      &lt;div class=&quot;content&quot;&gt;{{text.content}}&lt;/div&gt;
      &lt;div class=&quot;btn_wrap&quot;&gt;
        &lt;div class=&quot;btn cancel_btn&quot; v-if=&quot;text.type==='confirm'&quot; @click=&quot;cancel&quot;&gt;{{text.cancelText}}&lt;/div&gt;
        &lt;div class=&quot;btn&quot; @click=&quot;confirm&quot;&gt;{{text.confirmText}}&lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;style scoped&gt;
.mask {
  position: fixed;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9998;
}
.dialog {
  position: fixed;
  top: 50%;
  left: 8%;
  width: 84%;
  max-height: 80%;
  overflow-y: scroll;
  color: #333;
  background-color: #fff;
  transform: translateY(-50%);
  z-index: 9999;
}
.dialog::-webkit-scrollbar {
  display: none;
}
.wrap {
  padding: 15px 5% 0;
}
.title_wrap {
  text-align: center;
}
.title {
  font-size: 18px;
  font-weight: 500;
}
.close {
  color: #999;
  font-size: 18px;
  float: right;
}
.content {
  padding: 30px 0 25px;
  font-size: 16px;
}
.btn_wrap {
  padding: 10px 0;
  border-top: 1px solid #eee;
  text-align: center;
  display: flex;
}
.btn {
  flex: 1;
  line-height: 30px;
  font-weight: 500;
  color: #FFB309;
}
.cancel_btn {
  border-right: 1px solid #eee;
}
.fadeIn {
  animation: animateIn 0.5s;
}
.fadeOut {
  animation: animateOut 0.5s forwards;
}
@keyframes animateIn {
  0% {
    opacity: 0;
    transform: translateY(100%);
  }
  100% {
    opacity: 1;
    transform: translateY(0)
  }
}
@keyframes animateOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
&lt;/style&gt;
</code></pre>
<h1 id="导出组件">导出组件</h1>
<p>Dialog.js</p>
<pre><code>import vue from 'vue'
import dialogComponent from './Dialog.vue'

const DialogConstructor = vue.extend(dialogComponent)

function showDialog (text) {
  return new Promise((resolve, reject) =&gt; {
    const dialogDom = new DialogConstructor({
      el: document.createElement('div'),
      data () {
        return {
          showMask: true,
          showDialog: true,
          text: {
            title: text.title || '消息提示',
            content: text.content || '确认此操作',
            cancelText: text.cancelText || '取消',
            confirmText: text.confirmText || '确认',
            type: text.type || 'confirm'
          }
        }
      },
      methods: {
        close () {
          this.showMask = false
        },
        cancel () {
          reject(new Error())
          this.showMask = false
        },
        confirm () {
          resolve(new Error())
          this.showMask = false
        }
      }
    })
    document.body.appendChild(dialogDom.$el)
  })
}

function dialog () {
  vue.prototype.$dialog = showDialog
}

export default dialog
</code></pre>
<h1 id="注册组件">注册组件</h1>
<p>main.js</p>
<pre><code>import dialog from './components/dialog/Dialog.js'

Vue.use(dialog)
</code></pre>
<h1 id="调用组件">调用组件</h1>
<p>test.vue</p>
<pre><code>this.$dialog({
			content: '自定义内容'
		}).then(() =&gt; {
			console.log('自定义确认事件')
		}).catch(() =&gt; {
			console.log('自定义取消事件')
		})
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vscode个人配置]]></title>
        <id>https://blog.wzbus.xyz//post/vscode</id>
        <link href="https://blog.wzbus.xyz//post/vscode">
        </link>
        <updated>2019-09-12T07:25:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="插件">插件</h1>
<pre><code>Auto Rename Tag
Autoprefixer
Chinese (Simplified) Language Pack for Visual Studio Code
ESLint
HTML Snippets
open in browser
Reactjs code snippets
Vetur
</code></pre>
<h1 id="设置">设置</h1>
<pre><code>{
    &quot;workbench.colorTheme&quot;: &quot;Visual Studio Dark&quot;,
    &quot;workbench.editor.enablePreview&quot;: false,
    &quot;editor.fontSize&quot;: 16,
    &quot;editor.tabSize&quot;: 2,
    &quot;editor.detectIndentation&quot;: false,
    &quot;editor.snippetSuggestions&quot;: &quot;top&quot;,
    &quot;editor.minimap.enabled&quot;: true,
    &quot;editor.renderControlCharacters&quot;: false,
    &quot;python.pythonPath&quot;: &quot;D:\\Python\\python.exe&quot;,
    &quot;git.path&quot;: &quot;E:\\Git\\bin\\git.exe&quot;,
    &quot;git.enableSmartCommit&quot;: true,
    &quot;terminal.integrated.shell.windows&quot;: &quot;E:\\\\Git\\\\bin\\\\bash.exe&quot;,
    &quot;terminal.integrated.rendererType&quot;: &quot;dom&quot;,
    &quot;eslint.enable&quot;: true,
    &quot;eslint.autoFixOnSave&quot;: true,
    &quot;eslint.validate&quot;: [
      &quot;html&quot;,
      &quot;javascript&quot;,
      &quot;javascriptreact&quot;,
      &quot;vue-html&quot;,
      {
          &quot;language&quot;: &quot;vue&quot;,
          &quot;autoFix&quot;: true
      }
    ],
    &quot;stylusSupremacy.insertColons&quot;: true, // 是否插入冒号
    &quot;stylusSupremacy.insertSemicolons&quot;: false, // 是否插入分号
    &quot;stylusSupremacy.insertBraces&quot;: false, // 是否插入大括号
    &quot;stylusSupremacy.insertNewLineAroundImports&quot;: true, // import之后是否换行
    &quot;stylusSupremacy.insertNewLineAroundBlocks&quot;: true,
    &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,
    &quot;html.format.extraLiners&quot;: &quot;null&quot;, // 标签之间是否换行
    &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true, // 函数括号前是否加空格
    &quot;workbench.startupEditor&quot;: &quot;newUntitledFile&quot;, // 两个选择器中是否换行
    &quot;autoprefixer.browsers&quot;: [
      &quot;ie &gt;= 9&quot;,
      &quot;firefox &gt;= 16&quot;,
      &quot;chrome &gt;= 26&quot;,
      &quot;safari &gt;= 7&quot;,
      &quot;Opera &gt;= 15&quot;
  ],
  &quot;breadcrumbs.enabled&quot;: false,
  &quot;window.zoomLevel&quot;: 0
}
</code></pre>
<h1 id="代码片段">代码片段</h1>
<pre><code>{
  &quot;ajax&quot;: {
    &quot;prefix&quot;: &quot;ajax&quot;,
    &quot;body&quot;: [
      &quot;$.ajax({&quot;,
      &quot;  url: '$1',&quot;,
      &quot;  method: '${2:POST}',&quot;,
      &quot;  datatype: 'json',&quot;,
      &quot;  success: data =&gt; {&quot;,
      &quot;    $3;&quot;,
      &quot;  },&quot;,
      &quot;  error: err =&gt; {&quot;,
      &quot;    $4;&quot;,
      &quot;  }&quot;,
      &quot;});&quot;
    ],
    &quot;description&quot;: &quot;Ajax [JQ]&quot;
  },
  &quot;commment&quot;: {
    &quot;prefix&quot;: &quot;note&quot;,
    &quot;body&quot;: [
      &quot;/**&quot;,
      &quot;*  @param {$1} $2&quot;,
      &quot;*  @param {$3} $4&quot;,
      &quot;*  @return {$5} $6&quot;,
      &quot;*/&quot;
    ],
    &quot;description&quot;: &quot;Commment&quot;
  },
  &quot;export&quot;: {
    &quot;prefix&quot;: &quot;export&quot;,
    &quot;body&quot;: [
      &quot;export default ($1) =&gt; {&quot;,
      &quot;  $2&quot;,
      &quot;  return ''&quot;,
      &quot;}&quot;
    ],
    &quot;description&quot;: &quot;Export default function [ES6]&quot;
  },
  &quot;for&quot;: {
    &quot;prefix&quot;: &quot;for&quot;,
    &quot;body&quot;: [
      &quot;for (let i = 0; i &lt; ${1:arr}.length; i++) {&quot;,
      &quot;  $2&quot;,
      &quot;}&quot;
    ],
    &quot;description&quot;: &quot;For&quot;
  },
  &quot;function&quot;: {
    &quot;prefix&quot;: &quot;function&quot;,
    &quot;body&quot;: [
      &quot;function $1() {&quot;,
      &quot;  $2&quot;,
      &quot;}&quot;
    ],
    &quot;description&quot;: &quot;Function&quot;
  },
  &quot;jquery&quot;: {
    &quot;prefix&quot;: &quot;jq&quot;,
    &quot;body&quot;: [
      &quot;$('#$1').${2:click}(function() {&quot;,
      &quot;  $3&quot;,
      &quot;});&quot;
    ],
    &quot;description&quot;: &quot;Selector [JQ]&quot;
  },
  &quot;log&quot;: {
    &quot;prefix&quot;: &quot;log&quot;,
    &quot;body&quot;: [
      &quot;console.log($1);&quot;
    ],
    &quot;description&quot;: &quot;Log&quot;
  },
  &quot;promise&quot;: {
    &quot;prefix&quot;: &quot;promise&quot;,
    &quot;body&quot;: [
      &quot;new Promise((resolve, reject) =&gt; {&quot;,
      &quot;  resolve();&quot;,
      &quot;});&quot;
    ],
    &quot;description&quot;: &quot;Promise [ES6]&quot;
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7安装PHP7.2]]></title>
        <id>https://blog.wzbus.xyz//post/centos-php</id>
        <link href="https://blog.wzbus.xyz//post/centos-php">
        </link>
        <updated>2019-09-12T07:14:38.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装-php72">安装 PHP7.2</h1>
<p>安装 EPEL 软件包：</p>
<pre><code>$ sudo yum install epel-release
</code></pre>
<p>安装 remi 源：</p>
<pre><code>$ sudo yum install http://rpms.remirepo.net/enterprise/remi-release-7.rpm
</code></pre>
<p>安装 yum 扩展包：</p>
<pre><code>$ sudo yum install yum-utils
</code></pre>
<p>启用 remi 仓库：</p>
<pre><code>$ sudo yum-config-manager --enable remi-php72
$ sudo yum update
</code></pre>
<p>安装 PHP7.2：</p>
<pre><code>$ sudo yum install php72
</code></pre>
<p>安装 php-fpm 和一些其他模块：</p>
<pre><code>$ sudo yum install php72-php-fpm php72-php-gd php72-php-json php72-php-mbstring php72-php-mysqlnd php72-php-xml php72-php-xmlrpc php72-php-opcache
</code></pre>
<p>输入 php72 -v 查看版本信息</p>
<h1 id="php-fpm-服务">php-fpm 服务</h1>
<p>设置开机自启：</p>
<pre><code>$ sudo systemctl enable php72-php-fpm.service
</code></pre>
<p>常用 php-fpm 命令：</p>
<pre><code># 开启服务
$ sudo systemctl start php72-php-fpm.service
# 停止服务
$ sudo systemctl stop php72-php-fpm.service
# 查看状态
$ sudo systemctl status php72-php-fpm.service
</code></pre>
<p>通过 egrep 查询 nginx 服务器的用户和用户组：</p>
<pre><code>$ egrep '^(user|group)' /etc/nginx/nginx.conf
</code></pre>
<p>结果示例：</p>
<pre><code>user nginx;
</code></pre>
<p>编辑 /etc/opt/remi/php72/php-fpm.d/www.conf,修改执行 php-fpm 的权限：</p>
<pre><code>$ sudo vi /etc/opt/remi/php72/php-fpm.d/www.conf
</code></pre>
<p>设置用户和用户组为 nginx：</p>
<pre><code>$ user = nginx
$ group = nginx
</code></pre>
<p>保存并关闭文件，重启 php-fpm 服务：</p>
<pre><code>$ sudo systemctl restart php72-php-fpm.service
</code></pre>
<h1 id="路径整理">路径整理</h1>
<pre><code># php 安装路径
/etc/opt/remi/php72

# nginx 配置文件
/etc/nginx/nginx.conf

# nginx 默认项目路径
/usr/share/nginx/html
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7配置nginx环境]]></title>
        <id>https://blog.wzbus.xyz//post/centos-nginx</id>
        <link href="https://blog.wzbus.xyz//post/centos-nginx">
        </link>
        <updated>2019-09-12T02:48:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="创建服务器实例">创建服务器实例</h1>
<p><img src="https://blog.wzbus.xyz//post-images/1568429369329.png" alt=""><br>
我购买的是阿里云CentOS7 64位的服务器，过程不再过多累述，之后在控制台修改root用户密码。<br>
<img src="https://blog.wzbus.xyz//post-images/1568429482179.png" alt=""></p>
<h1 id="远程连接服务器">远程连接服务器</h1>
<p>Windows 用户可以使用 Xshell或者Putty ，Mac 用户可以使用系统自带的终端工具。然后用 ssh 命令，连接到你的服务器。<br>
<code>ssh root@218.244.147.196</code><br>
@ 左边的 root 是连接时使用的用户的名字，@ 右边的数字是你的服务器的 IP 地址。这行命令的意思就是，使用 root 用户，登录到 218.244.147.196 这台服务器上。回车以后，会提示你输入 root 用户的密码（这个密码阿里云会发送到你手机上）。</p>
<h1 id="添加新用户并分配-root-权限">添加新用户并分配 Root 权限</h1>
<p>为了安全，我们可以单独创建一个平时操作服务器的用户，并且给这个用户分配可以使用 Root 的权限，也就是如果需要 Root 权限，可以在命令的前面加上 sudo 获取到 Root 用户的权限。</p>
<h2 id="添加新用户">添加新用户</h2>
<p><code>adduser wzbus</code></p>
<h2 id="设置密码">设置密码</h2>
<p><code>passwd wzbus</code></p>
<h2 id="分配-root-权限">分配 Root 权限</h2>
<p><code>gpasswd -a wzbus wheel</code></p>
<h2 id="用新用户登录服务器">用新用户登录服务器</h2>
<p><code>ssh wanghao@218.244.147.196</code></p>
<h1 id="安装-nginx">安装 NGINX</h1>
<p>先安装epel仓库<br>
<code>sudo yum install epel-release -y</code><br>
再用包管理工具直接安装nginx<br>
<code>sudo yum install nginx -y</code></p>
<h1 id="启动">启动</h1>
<p><code>sudo systemctl start nginx</code></p>
<h1 id="开机自启">开机自启</h1>
<p><code>sudo systemctl enable nginx</code><br>
此后在浏览器上输入公网IP地址，你将看到Welcome to nginx!等文字。</p>
<h1 id="配置-nginx-虚拟主机">配置 nginx 虚拟主机</h1>
<p>虚拟主机允许我们在同一台服务器上运行多个网站，我们可以为不同的域名配置不同的规则。下面先通过命令行进入到 nginx 配置文件目录：（当然你也可以在windows上安装WinSCP连接服务器，以图形化界面操作）<br>
<code>cd /etc/nginx/conf.d</code><br>
创建一个新的配置文件，比如我要为wzbus.xyz这个主机名创建一个虚拟主机：<br>
<code>vim wzbus.conf</code><br>
写入以下配置：</p>
<pre><code>server {
        listen       80;
        server_name wzbus.xyz www.wzbus.xyz;
        root         /home/www;

        location / {  
          add_header Access-Control-Allow-Origin *;
          add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
          add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

          if ($request_method = 'OPTIONS') {
              return 204;
          }
        }

        error_page 404 /404.html;
            location = /404.html {
              root /home;
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }

        }
    }
</code></pre>
<p>上述代码为80端口下wzbus.xyz域名的基础配置，网站静态文件保存在/home/www目录下、允许所有跨域请求（亦可以设置域名白名单）、自定义404页面在/home目录下。</p>
<h1 id="重启-nginx">重启 nginx</h1>
<p><code>sudo systemctl reload nginx</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[百度地图API公交线路绘制]]></title>
        <id>https://blog.wzbus.xyz//post/bmap</id>
        <link href="https://blog.wzbus.xyz//post/bmap">
        </link>
        <updated>2019-09-10T08:01:14.000Z</updated>
        <content type="html"><![CDATA[<p>由于百度地图搜索结果仅能显示单条公交线路，不利于对公交线网的研究，于是我写了这个基于百度地图JavaScript API V3.0的公交线路绘制网站（http://www.84ditu.com）。本文主要介绍绘制公交的基础功能，其中部分代码涉及jQuery。<br>
<img src="https://blog.wzbus.xyz//post-images/1568102615932.jpg" alt="成品图"></p>
<h3 id="申请api密钥">申请API密钥</h3>
<p>首先要有一个百度账号，并且申请成为百度开发者，然后才能申请ak，应用类型选择浏览器端，必须勾选JavaScript API，最后将申请到的ak作为script链接的一部分在html中的head部分引入。</p>
<p><img src="https://blog.wzbus.xyz//post-images/1568102630268.png" alt="ak申请"></p>
<h3 id="生成地图并自动定位">生成地图并自动定位</h3>
<pre><code class="language-js">var map = new BMap.Map(&quot;map&quot;); //&quot;map&quot;为用于展示地图的div的id
var city;
var myCity = new BMap.LocalCity();
myCity.get(getCity);
function getCity (res) {
  if (res) {
    city = res.name;
    map.centerAndZoom(city, 13);
  } else {
    city = &quot;温州市&quot;; //默认城市
  }
}
</code></pre>
<h3 id="判断路线是否已添加">判断路线是否已添加</h3>
<pre><code class="language-js">function addLine (line) {
  if ($.inArray(line, readyAdd) == -1) {
    bus.getBusList(line);
    readyAdd.push(line); //readyAdd为空数组，用于存储已添加的线路名
  } else {
    alert(&quot;该路线已添加&quot;);
  }
}
</code></pre>
<h3 id="检索并生成路线">检索并生成路线</h3>
<pre><code class="language-js">var getPolylineOptions = function getPolylineOptions () { //线路样式配置
  return {
    strokeColor: $(&quot;#strokeColor&quot;).val(),
    strokeWeight: $(&quot;#strokeWeight&quot;).val(),
    strokeOpacity: $(&quot;#strokeOpacity&quot;).val(),
    strokeStyle: $(&quot;#strokeStyle&quot;).val()
  }
};
var bus = new BMap.BusLineSearch(map, {
  onGetBusListComplete: function onGetBusListComplete (result) {
    let busListItem = $(&quot;#busListItem&quot;).val(); //公交上下行
    let fstLine = result.getBusListItem(busListItem);
    bus.getBusLine(fstLine);
  },
  onGetBusLineComplete: function onGetBusLineComplete (busline) {
    polyline = new BMap.Polyline(busline.getPath(), getPolylineOptions());
    let lineName = busline.name.substr(0, busline.name.indexOf(&quot;(&quot;)); //提取线路名
    map.addOverlay(polyline); //添加折线覆盖物
    let stationList = []; //获取站点
    for (let i = 0, len = busline.getNumBusStations(); i &lt; len; i++) {
      let busStation = busline.getBusStation(i);
      let marker = new BMap.Marker(busStation.position, {
        icon: stationIcon
      });
      stationList.push(new BMap.Point(busStation.position.lng, busStation.position.lat));
      if ($(&quot;#strokeStation&quot;).val() == &quot;true&quot;) { //显示站点
        map.addOverlay(marker);
        marker.setTitle(lineName + &quot;:&quot; + busStation.name);
        marker.addEventListener(&quot;click&quot;, function (e) { //单击站点显示信息
          let opts = {
            width: 250,
            height: 80,
            title: e.target.getTitle().substr(e.target.getTitle().indexOf(&quot;:&quot;) + 1)
          };
          let content = busline.name;
          let infoWindow = new BMap.InfoWindow(content, opts);
          let point = new BMap.Point(e.target.getPosition().lng, e.target.getPosition().lat);
          map.openInfoWindow(infoWindow, point);
        });
      }
    }
    if (enableAutoViewport) {
      let view = map.getViewport(eval(stationList));
      map.centerAndZoom(view.center, view.zoom);
    }
    polyline.addEventListener(&quot;dblclick&quot;, function (e) { //双击线路删除路径
      let allOverlay = map.getOverlays();
      for (let i = 0, len = allOverlay.length; i &lt; len; i++) {
        if (allOverlay[i].toString() == &quot;[object Marker]&quot;) {
          if (allOverlay[i].getTitle().substr(0, allOverlay[i].getTitle().indexOf(&quot;:&quot;)) == lineName) {
            allOverlay[i].enableMassClear();
          } else {
            allOverlay[i].disableMassClear();
          }
        } else {
          allOverlay[i].disableMassClear();
        }
      }
      e.target.enableMassClear();
      map.clearOverlays();
      let index = readyAdd.indexOf(lineName);
      readyAdd.splice(index, 1);
    });
    polyline.addEventListener(&quot;mouseover&quot;, function (e) { //移向线路高亮路径
      if (e.target == currentPolyline) {
        return false;
      }
      currentPolyline = e.target;
      lineOpacity = currentPolyline.getStrokeOpacity();
      currentPolyline.setStrokeOpacity(&quot;1&quot;);
    });
    polyline.addEventListener(&quot;mouseout&quot;, function (e) {
      e.target.setStrokeOpacity(lineOpacity);
    })
  }
});
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Gulp4.0.2打包HTML项目]]></title>
        <id>https://blog.wzbus.xyz//post/gulp</id>
        <link href="https://blog.wzbus.xyz//post/gulp">
        </link>
        <updated>2019-09-10T07:48:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="项目目录">项目目录</h2>
<p><img src="https://blog.wzbus.xyz//post-images/1568102074198.png" alt="项目目录"><br>
新建一个app目录用于存放源代码，dist目录（会自动生成）用于存放打包后的文件，rev目录（会自动生成）用于存放其它文件名添加Hash值前后的映射信息。<br>
##安装依赖</p>
<pre><code>npm install --save-dev babel-core babel-plugin-transform-remove-strict-mode babel-preset-es2015 del gulp gulp-autoprefixer gulp-babel@7 gulp-cached gulp-clean-css gulp-connect gulp-imagemin gulp-rev gulp-rev-collector gulp-uglify
</code></pre>
<p>理论上第一步只要安装gulp包，就能将项目初始化，为了方便，我就一次性全列出来了，功能可见下面源码中的说明，大家根据需求取舍，建议使用淘宝镜像cnpm来安装。特别说明一下，gulp-babel得安装8.0以下的版本，不然使用ES6语法会报错找不到@babel/core。全部安装完成后效果如下。<br>
<img src="https://blog.wzbus.xyz//post-images/1568102124324.png" alt="package.json"></p>
<h2 id="代码编写">代码编写</h2>
<p>不废话，直接上源码</p>
<pre><code>//.babelrc
{
  &quot;presets&quot;:[&quot;es2015&quot;], //编译为ES5语法
  &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;] //关闭严格模式，这里按需求而定
}
</code></pre>
<pre><code>&lt;!--test.html --&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;css/test.css&quot;&gt;
  &lt;title&gt;test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;h1&gt;Test&lt;/h1&gt;
  &lt;img src=&quot;pic/test.png&quot;&gt;
  &lt;script src=&quot;js/test.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<pre><code>//test.js
let msg = &quot;test&quot;;
console.log(msg); //ES6语法会被编译为ES5语法，并清除注释
</code></pre>
<pre><code>//gulpfile.babel.js
import gulp from 'gulp'; //引入依赖包，gulp必需
import babel from 'gulp-babel'; //支持ES6语法需要babel相关几个包
import cached from &quot;gulp-cached&quot;;
import autoprefixer from 'gulp-autoprefixer';
import cleanCss from 'gulp-clean-css';
import uglify from 'gulp-uglify';
import rev from 'gulp-rev';
import revCollector from 'gulp-rev-collector';
import imagemin from &quot;gulp-imagemin&quot;;
import connect from &quot;gulp-connect&quot;;
import del from 'del'; //Node原生的清除方法

gulp.task('css', () =&gt; {
  return gulp.src('app/css/**/*.css') //读取css目录下任意多级目录下所有以.css为结尾的文件，最新版gulp中建议使用return语法
    .pipe(cached('css')) //缓存文件，避免每次重复打包
    .pipe(autoprefixer({ //自动加兼容前缀
      overrideBrowserslist: ['&gt; 5%'], //兼容使用率超过5%的浏览器
      cascade: false //前缀美化
    }))
    .pipe(cleanCss({ //压缩CSS
      advanced: false,
      compatibility: 'ie8',
      keepBreaks: false,
      keepSpecialComments: '*'
    }))
    .pipe(rev())
    .pipe(gulp.dest('dist/css')) //保存打包后的CSS文件到dist下的css目录
    .pipe(rev.manifest()) //文件名加Hash值，配合上上行使用
    .pipe(gulp.dest('rev/css')) //保存CSS映射信息
});

gulp.task('js', function () {
  return gulp.src('app/js/**/*.js')
    .pipe(cached('js'))
    .pipe(babel()) 
    .pipe(uglify({ //压缩JS
      mangle: false //是否混淆变量
    }))
    .pipe(rev())
    .pipe(gulp.dest('dist/js'))
    .pipe(rev.manifest())
    .pipe(gulp.dest('rev/js'))
});

gulp.task('pic', function () {
  return gulp.src('app/pic/**/*')
    .pipe(cached('pic'))
    .pipe(imagemin()) //压缩图片，但效果不明显
    .pipe(gulp.dest('dist/pic'));
});

gulp.task('html', function() {
  return gulp.src(['rev/**/*.json', 'app/*.html'])
    .pipe(cached('html'))
    .pipe(revCollector({ //更改HTML源码中链接路径
      replaceReved: true //替换为追加Hash值后的文件名
      dirReplacements: {
         'css': 'css', //将URL中的css替换为css，其实相同则不必写
         'js': 'js'
       }
    }))
    .pipe(gulp.dest('dist'))
});

gulp.task('clear', function () {
  return del(['dist/*']); //每次打包清除dist目录
});

gulp.task(&quot;reload&quot;, function () {
  return gulp.src('app/*.html')
    .pipe(connect.reload()); //页面重新加载
})

gulp.task('watch', function() {
  gulp.watch('app/*.html', gulp.series('html')); //监听html文件变化，执行‘html’任务
  gulp.watch('app/css/**/*.css', gulp.series('css'));
  gulp.watch('app/js/**/*.js', gulp.series('js'));
  gulp.watch('app/pic/**/*', gulp.series('pic'));
  gulp.watch('dist/**/*', gulp.series('reload'));
});
 
gulp.task('connect', function () { 
  connect.server({ //启用本地服务器
    root: 'dist', //根目录
    port: 3000, //端口
    livereload: true //热更新
  });
});

gulp.task('default', gulp.series('clear', gulp.parallel('css', 'js', 'pic'), 'html')); //gulp指令默认执行的任务，series为串行执行，parallel为并行执行。这里先清空dist目录，再编译，后更改html文件

gulp.task('server', gulp.series('default', gulp.parallel('connect', 'watch'))); //开启服务器并实时更新页面
</code></pre>
<h2 id="打包编译">打包编译</h2>
<p>在命令行中输入gulp开始打包，不出意外，你的文件夹下将会多出以下文件。<br>
<img src="https://blog.wzbus.xyz//post-images/1568102145814.png" alt="打包成功"><br>
再输入gulp server指令，可以在localhost:3000查看页面，当有源码改变后，会触发watch中的任务，不必手动刷新便能在页面上看到效果。最后附上这个项目的github地址 <a href="https://github.com/wzbus/gulp">https://github.com/wzbus/gulp</a></p>
]]></content>
    </entry>
</feed>